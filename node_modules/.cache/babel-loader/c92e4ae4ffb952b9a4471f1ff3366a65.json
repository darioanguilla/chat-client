{"ast":null,"code":"var _jsxFileName = \"/Users/ignaziosammarco/Desktop/arces/chat-client/src/components/Chat.js\",\n    _s = $RefreshSig$();\n\nimport { Component } from 'react';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { useRef, useEffect } from 'react';\nimport './Chat.css'; // const client = new W3CWebSocket('ws://localhost:8080/chat');\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new W3CWebSocket('wss://chat-server-spring.herokuapp.com/chat');\nconst messages = [// {id:\"1\", text:\"Dummy message 1\"},\n  // {id:\"2\", text:\"Dummy message 2\"}\n];\n\nconst AlwaysScrollToBottom = () => {\n  _s();\n\n  const elementRef = useRef();\n  useEffect(() => elementRef.current.scrollIntoView());\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: elementRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 10\n  }, this);\n};\n\n_s(AlwaysScrollToBottom, \"CKe/C9l/PZDcdMrjDfTWxieUegY=\");\n\n_c = AlwaysScrollToBottom;\n\nclass Chat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sendMessage = () => {\n      console.log(this.state);\n      client.send(this.state.message.from + \": \" + this.state.message.text);\n      this.setState({\n        message: ''\n      });\n    };\n\n    this.state = {\n      messages: messages,\n      message: {\n        from: \"Ignazio\",\n        text: \"\"\n      }\n    };\n  }\n\n  handleChange(e) {\n    // this.setState({\n    //     message : {text: e.target.value}\n    // });\n    this.setState(prevState => ({\n      message: { // object that we want to update\n        ...prevState.message,\n        // keep all other key-value pairs\n        text: {\n          text: e.target.value\n        } // update the value of specific key\n\n      }\n    }));\n    console.log(this.state);\n  } // Manda il messaggio salvato e aggiornato sullo state \n\n\n  componentDidMount() {\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n    };\n\n    client.onmessage = message => {\n      let id = this.state.messages.length;\n      this.setState({\n        messages: [...this.state.messages, {\n          id: id,\n          text: message.data\n        }]\n      });\n      console.log(message);\n    };\n\n    client.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Chat realizzata con React e WebSockets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chatbox\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"messages\",\n          className: \"messages\",\n          children: [this.state.messages.map(message => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-text\",\n              children: message.text\n            }, message.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 17\n            }, this);\n          }), /*#__PURE__*/_jsxDEV(AlwaysScrollToBottom, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            className: \"message-input-text\",\n            value: this.state.message.text || \"\",\n            onChange: this.handleChange.bind(this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"message-input-send\",\n            onClick: () => this.sendMessage(),\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Chat; // Fonti\n// https://www.freecodecamp.org/news/how-to-build-a-react-js-chat-app-in-10-minutes-c9233794642b/\n\nvar _c;\n\n$RefreshReg$(_c, \"AlwaysScrollToBottom\");","map":{"version":3,"sources":["/Users/ignaziosammarco/Desktop/arces/chat-client/src/components/Chat.js"],"names":["Component","w3cwebsocket","W3CWebSocket","useRef","useEffect","client","messages","AlwaysScrollToBottom","elementRef","current","scrollIntoView","Chat","constructor","props","sendMessage","console","log","state","send","message","from","text","setState","handleChange","e","prevState","target","value","componentDidMount","onopen","onmessage","id","length","data","onclose","render","map","bind"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport { w3cwebsocket as W3CWebSocket } from \"websocket\";\nimport { useRef, useEffect  } from 'react';\nimport './Chat.css';\n\n// const client = new W3CWebSocket('ws://localhost:8080/chat');\nconst client = new W3CWebSocket('wss://chat-server-spring.herokuapp.com/chat');\n\nconst messages = [\n  // {id:\"1\", text:\"Dummy message 1\"},\n  // {id:\"2\", text:\"Dummy message 2\"}\n];\n\nconst AlwaysScrollToBottom = () => {\n  const elementRef = useRef();\n  useEffect(() => elementRef.current.scrollIntoView());\n  return <div ref={elementRef} />;\n};\n\nclass Chat extends Component{\n\n  constructor(props) {\n    super(props);\n    this.state = { messages: messages, message: {from:\"Ignazio\",text:\"\"} };\n  }\n\n  handleChange(e) {\n    // this.setState({\n    //     message : {text: e.target.value}\n    // });\n\n    this.setState((prevState) => ({\n      message: {\n        // object that we want to update\n        ...prevState.message, // keep all other key-value pairs\n        text: { text: e.target.value }, // update the value of specific key\n      },\n    }));\n    console.log(this.state);\n  }\n  \n  // Manda il messaggio salvato e aggiornato sullo state \n  sendMessage = () => {\n    console.log(this.state);\n    client.send(this.state.message.from +\": \"+ this.state.message.text);\n    this.setState({\n      message: ''\n    });\n  }\n\n  componentDidMount() {\n    client.onopen = () => {\n      console.log('WebSocket Client Connected');\n    };\n    client.onmessage = (message) => {\n      let id = this.state.messages.length;\n      this.setState({\n        messages: [...this.state.messages, {id:id,text: message.data}]\n      })\n      console.log(message);\n    };\n    client.onclose = () => {\n      console.log('WebSocket connection closed');\n    };\n  }\n\n  render() {\n    return (\n      <div>\n        <h2>Chat realizzata con React e WebSockets</h2>\n        <div className=\"chatbox\">\n          <div id=\"messages\" className=\"messages\">\n            {this.state.messages.map((message) => {\n              return (\n                <div className=\"message-text\" key={message.id}>\n                  {message.text}\n                </div>\n              );\n            })}\n            <AlwaysScrollToBottom />\n          </div>\n          <div className=\"message-input\">\n            <input\n              className=\"message-input-text\"\n              value={this.state.message.text || \"\"}\n              onChange={this.handleChange.bind(this)}\n            ></input>\n            <button\n              className=\"message-input-send\"\n              onClick={() => this.sendMessage()}\n            >\n              Send\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default Chat;\n\n\n// Fonti\n// https://www.freecodecamp.org/news/how-to-build-a-react-js-chat-app-in-10-minutes-c9233794642b/\n"]},"metadata":{},"sourceType":"module"}